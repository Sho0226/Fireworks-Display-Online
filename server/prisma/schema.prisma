datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String            @id
  email         String
  signInName    String
  createdAt     DateTime
  tasks         Task[]
  Room          Room[]
  fireFlower    fireFlower[]
  Liker         likedFireFlower[] @relation(name: "LikerRelation")
  suggestedUser likedFireFlower[] @relation(name: "SuggestedUserRelation")
  chat          chat[]
  UserInRoom    UserInRoom?
}

model UserInRoom {
  userId            String               @id
  enteredAt         DateTime
  roomId            String
  havingFireFlowers FireFlowerWithUser[]
  User              User                 @relation(fields: [userId], references: [id])
  Room              Room                 @relation(fields: [roomId], references: [id])
}

model FireFlowerWithUser {
  userInRoomUserId String
  fireFlowerId     String
  UserInRoom       UserInRoom @relation(fields: [userInRoomUserId], references: [userId])
  fireFlower       fireFlower @relation(fields: [fireFlowerId], references: [id])

  @@id([userInRoomUserId, fireFlowerId])
}

model Task {
  id        String   @id @default(uuid())
  label     String
  done      Boolean
  imageKey  String?
  createdAt DateTime
  Author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Room {
  id          String       @id @default(uuid())
  name        String
  password    String?      @unique
  status      RoomStatus
  createdAt   DateTime
  updatedAt   DateTime?
  lastUsedAt  DateTime?
  creatorId   String       @map("createdBy")
  Creator     User         @relation(fields: [creatorId], references: [id])
  chat        chat[]
  UserInRooms UserInRoom[]
}

enum RoomStatus {
  PUBLIC
  PRIVATE
}

model fireFlower {
  id                 String               @id @default(uuid())
  creatorId          String
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  structure          Json
  Creator            User                 @relation(fields: [creatorId], references: [id])
  likedBy            likedFireFlower[]
  FireFlowerWithUser FireFlowerWithUser[]
}

model likedFireFlower {
  id              String     @id @default(uuid())
  userId          String
  fireFlowerId    String
  likedAt         DateTime   @default(now())
  suggestedUserId String?
  SuggestedUser   User?      @relation(name: "SuggestedUserRelation", fields: [suggestedUserId], references: [id])
  Liker           User       @relation(name: "LikerRelation", fields: [userId], references: [id])
  fireFlower      fireFlower @relation(fields: [fireFlowerId], references: [id])

  @@unique([userId, fireFlowerId])
  @@index([fireFlowerId])
}

model chat {
  id        String   @id
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  content   String
  createdAt DateTime
}
